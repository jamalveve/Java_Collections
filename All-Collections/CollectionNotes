https://www.javatpoint.com/java-collections-interview-questions
1)When to Use an Iterator
**************************
Removing Elements: If you need to remove elements from the collection during iteration, you should use an Iterator. The Iterator provides a safe way to remove elements using the remove() method, preventing ConcurrentModificationException.

Example: Removing specific elements from a collection based on some condition.

More Control: If you need more control over the iteration process, such as skipping elements or iterating backward, Iterator is more flexible.

Generic Use Cases: In some cases where you need to perform complex logic while iterating, using an Iterator might be cleaner and more understandable.
______________________________________________________________________________________________________________________________________________________________
2)When to Use a For-Each Loop
******************************
Simplicity and Readability: The enhanced for-loop is generally more concise and easier to read, especially when you don’t need to remove elements or manipulate the iteration process.

Example: Just iterating through all elements in a collection without needing to modify it.

Performance: For most collections, the performance difference is negligible for simple iteration. The enhanced for-loop can be slightly more efficient due to less overhead than creating an Iterator object, though this is often minimal.

No Removal or Modification: If you are just iterating through the elements for reading or processing without any need to modify the collection, the enhanced for-loop is preferred.
______________________________________________________________________________________________________________________________________________________________
Advantages of Each Approach
Advantages of Using an Iterator
******************************
Safe Removal: The ability to remove elements during iteration without throwing exceptions.
Flexibility: Greater control over the iteration process (e.g., modifying the flow).
Works with All Collections: Iterator can be used with any collection that implements the Iterable interface.
Advantages of Using a For-Each Loop
************************************
Simplicity: More concise syntax that improves code readability.
Less Boilerplate: Less code to write compared to using Iterator, which can make maintenance easier.
Direct Access to Elements: Directly accessing elements without needing to call next().

______________________________________________________________________________________________________________________________________________________________
3)SET in collection
&&&&&&&&&&&&&&&&&&
When to Use a Set
######################
Unique Elements: When you want to store only unique values and automatically avoid duplicates. For example, if you're collecting user IDs or email addresses.

Fast Lookup: When you need to check for the existence of an element quickly. HashSet provides average O(1) time complexity for lookups.

Mathematical Set Operations: When you need to perform operations like union, intersection, and difference between collections.

Unordered Collection: When the order of elements does not matter. A HashSet does not maintain any order, while a LinkedHashSet maintains insertion order.

Performance: When you need better performance for add, remove, and contains operations compared to a list, especially when the collection size is large.

When Not to Use a Set
###########################
Ordered Collection: If you need to maintain the order of elements or allow duplicates, use a List (like ArrayList) instead.

Indexed Access: If you need to access elements by index, a Set is not suitable, as it does not provide indexed access.

Synchronization: If you need thread safety, consider using Collections.synchronizedSet() around a Set, or use a CopyOnWriteArraySet for concurrent modifications.

3.1)when to  use HashSet
#############################
above all applies

3.2)when to use Linked HashSet
##############################

Maintains Insertion Order: Unlike HashSet, which does not guarantee any order,
 LinkedHashSet maintains the order in which elements are added.
 When you iterate over a LinkedHashSet, the elements are returned in their insertion order.
  
It combines the benefits of a hash table (for quick access and performance) with the advantages of a linked list (for insertion iteration order).
 
Maintaining a unique set of user preferences in the order they were set.
Storing the history of user actions where the order of actions matters.
Implementing a cache with a predictable iteration order for elements.

Storing a unique collection of IDs where the order of insertion does not matter.
Checking for the existence of elements in a large dataset without concern for ordering.
Performance-sensitive applications where memory usage is a key factor and order is irrelevant.
3.3)when to use TreeSet
##############################
Sorted Order: TreeSet maintains its elements in a sorted (ascending) order. The order can be determined by the natural ordering of the elements or by a custom comparator provided at the time of set creation.
Null Elements: A TreeSet does not allow null elements. If you attempt to add a null element, it will throw a NullPointerException. 
we have floor ,ceileing,pollfirst poll last ,head set, tailset,higher ,lowyer

Sorted Data:-> Use TreeSet when you need to maintain a collection of elements in sorted order. For example, if you want to store a list of names in alphabetical order or maintain a range of numbers.

Range Queries: ->When you need to perform range queries efficiently, TreeSet allows you to easily find elements within a specified range.

Navigation Methods: ->Use TreeSet when you need methods for accessing the nearest elements (like higher(), lower(), first(), and last()).
 
______________________________________________________________________________________________________________________________________________________________
4)Hashset:->
&&&&&&&&&&&&&&&

Constructors of HashSet
4.1)Default Constructor


java
Copy code
HashSet<HashSetType>() 
Description: Creates a new, empty HashSet with a default initial capacity (16) and load factor (0.75).
Ex:
HashSet<String> set = new HashSet<>();

4.2)Constructor with Initial Capacity
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

HashSet(int initialCapacity) 
Description: Creates a new, empty HashSet with the specified initial capacity and a default load factor (0.75).
Parameters:
initialCapacity: The initial capacity of the HashSet.
Example:

HashSet<String> set = new HashSet<>(32); // Initial capacity of 32

While a HashSet will grow automatically, providing an initial capacity is a useful strategy to enhance performance, optimize memory usage, and control resource allocation, especially when dealing with a known number of elements. This proactive approach can lead to a more efficient application, especially in scenarios where performance is critical.
if yu have more data to be stores around 1000 so if you init it, it is less likely to resize frequently, ,so resulting in faster performance.


4.3)Constructor with Initial Capacity and Load Factor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Load Factor= 
Number of Buckets/
Number of Elements

The load factor:-in the context of a HashSet (and generally in hash tables) is a measure that determines when the hash table should be resized. It plays a critical role in balancing memory usage and performance. Here’s a detailed explanation of what load factor means:
​

HashSet(int initialCapacity, float loadFactor) 
Description: Creates a new, empty HashSet with the specified initial capacity and load factor.


Parameters:
initialCapacity: The initial capacity of the HashSet.
loadFactor: The load factor for the HashSet.
Example:
java
Copy code
HashSet<String> set = new HashSet<>(32, 0.75f); // Initial capacity of 32 and load factor of 0.75


Let’s see how load factor works in a practical example:

Initialization:

HashSet<String> set = new HashSet<>(10, 0.75f);

Capacity and Load Factor:

Initial Capacity = 10
Load Factor = 0.75
Threshold for resizing = 
10 × 0.75=7.5
(meaning it will resize when trying to add the 8th element).
Adding Elements:

Adding 7 elements will not trigger a resize:

set.add("Apple");  // 1
set.add("Banana"); // 2
set.add("Cherry"); // 3
set.add("Date");   // 4
set.add("Elderberry"); // 5
set.add("Fig");    // 6
set.add("Grapes"); // 7

Adding the 8th element:

set.add("Honeydew"); // This will trigger a resize
Resizing:
When the 8th element is added, the underlying array will resize (typically doubling its capacity to 20), 
and all existing elements will be rehashed to the new array.
4.4)Constructor with Another Collection
**************************************

HashSet(Collection<? extends E> c) 
Description: Creates a new HashSet that contains the elements of the specified collection. The HashSet is created with a default initial capacity and load factor.
Parameters:
c: Collection whose elements are to be placed into the HashSet.
Example:

List<String> list = Arrays.asList("Apple", "Banana", "Cherry");
HashSet<String> set = new HashSet<>(list); // Contains elements from the list
Summary
^^^^^^^^^^^^
Default Constructor: Creates an empty HashSet with a default capacity and load factor.
Constructor with Initial Capacity: Allows you to specify the initial size of the HashSet.
Constructor with Initial Capacity and Load Factor: Lets you customize both the initial size and the load factor.
______________________________________________________________________________________________________________________________________________________________

LinkedHashSet:
&&&&&&&&&&&&&&&&&&&&
5)Constructors of LinkedHashSet:-4
********************************

remember:lhs dont have remove method
1)Default Constructor:
^^^^^^^^^^^^^^^^^^^^^^^^
LinkedHashSet<Type> set = new LinkedHashSet<>();
This creates an empty LinkedHashSet with the default initial capacity (16) and a load factor of 0.75.
Constructor with Collection: Initializes a HashSet with elements from another collection.

2)Constructor with Initial Capacity:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
LinkedHashSet<Type> set = new LinkedHashSet<>(int initialCapacity);

3)Constructor with Initial Capacity and Load Factor:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
LinkedHashSet<Type> set = new LinkedHashSet<>(int initialCapacity, float loadFactor);

4)Constructor with Another Collection:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
LinkedHashSet<Type> set = new LinkedHashSet<>(Collection<? extends Type> c);
______________________________________________________________________________________________________________________________________________________________

6)TreeSet
&&&&&&&&&&&&&&&

Key Features of TreeSet
Sorted Order:
^^^^^^^^^^^^^^

TreeSet maintains its elements in a sorted order. When you iterate through a TreeSet, the elements will be retrieved in ascending order (or in the order defined by a custom comparator if provided).
NavigableSet Interface:
^^^^^^^^^^^^^^^^^^^^^^^^

TreeSet implements the NavigableSet interface, which means it provides methods for retrieving elements in a sorted manner (e.g., methods like first(), last(), higher(), lower(), etc.).
Performance:
^^^^^^^^^^^^^^^^^^

The basic operations (add, remove, and contains) in a TreeSet have a time complexity of O(log n) because it is implemented as a red-black tree (a type of self-balancing binary search tree).
No Duplicates:
^^^^^^^^^^^^^^^^^

Like all sets, TreeSet does not allow duplicate elements.
Null Elements:
^^^^^^^^^^^^^^^^^

TreeSet does not allow null elements because it relies on the natural ordering of elements. Attempting to add null will throw a NullPointerException.

When to Use TreeSet
************************
Sorted Data:-> Use TreeSet when you need to maintain a collection of elements in sorted order. For example, if you want to store a list of names in alphabetical order or maintain a range of numbers.

Range Queries: ->When you need to perform range queries efficiently, TreeSet allows you to easily find elements within a specified range.

Navigation Methods: ->Use TreeSet when you need methods for accessing the nearest elements (like higher(), lower(), first(), and last()).
 
constrctor of Treeset
^^^^^^^^^^^^^^^^^^^^^^^^^^


______________________________________________________________________________________________________________________________________________________________
when to use Iterator and spliterator?
***************************************
split
********
The main feature of a Spliterator is its ability to "split" a collection into smaller parts for parallel processing. 


 It was introduced in Java 8 a
______________________________________________________________________________________________________________________________________________________________

List in collection
&&&&&&&&&&&&&&&&&&

When to Choose ArrayList
##############################
Frequent Access Operations:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If you need fast random access to elements (e.g., using get(index)), ArrayList is generally better. It provides constant-time access (O(1)) to elements because it uses an array internally.

Less Frequent Insertions/Deletions:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If your application requires infrequent(less) insertions or deletions (especially in the middle of the list), ArrayList is preferable. While adding or removing elements at the end is efficient (O(1) on average), operations in the middle can be expensive (O(n)), as elements need to be shifted.

Memory Efficiency:
^^^^^^^^^^^^^^^^^^^
ArrayList has less overhead compared to LinkedList because it uses a single array to store elements. This can be more memory-efficient if you're dealing with a large number of elements.

Predictable Performance:
^^^^^^^^^^^^^^^^^^^^^^^^^
For applications where predictable performance is critical and you're mostly working with fixed-sized or near-fixed-sized lists, ArrayList's performance characteristics are more predictable.
bcz  resizing or shifting elements need to happenn in array list when size grows

When to Choose LinkedList
##########################
Frequent Insertions/Deletions:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If your application requires frequent insertions or deletions, particularly at the beginning or in the middle of the list, LinkedList is often more suitable. It provides constant-time performance (O(1)) for insertions and deletions at both the head and tail of the list, and amortized constant-time performance (O(1)) when using iterators to add or remove elements in the middle.

No Need for Random Access:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If you don’t need frequent random access to elements (e.g., you only need to traverse the list or modify it), LinkedList can be more appropriate. It provides linear-time access (O(n)) to elements because you must traverse the list from the beginning or end.

Dynamic Size:
^^^^^^^^^^^^
LinkedList can be more efficient when the list size changes frequently. It grows and shrinks dynamically without the need for resizing or shifting elements, as required with ArrayList.

Deque Operations:
^^^^^^^^^^^^^^^^^^^^^^
If you need to perform deque operations (i.e., add or remove elements from both ends), LinkedList supports these operations efficiently with methods like addFirst(), addLast(), removeFirst(), and removeLast().
alos peek poll pop and peek first last,poll first last,offer offer forst and last

when to choose vector
##########################
vector is similar to arraylosts 1 st two point

Thread-Safe: Vector is synchronized, which means it is thread-safe and can be used safely in a multi-threaded environment.
Dynamic Array: Similar to ArrayList, it implements a resizable array.
Multi-threaded Environments: Use Vector if you need a thread-safe list and prefer not to handle synchronization manually. Vector ensures thread safety by synchronizing all its methods.
______________________________________________________________________________________________________________________________________________________________

8)ArrayList
***************
 o (i.e. 1.5 times the previous array).
 
 deafult capacity 10 and loadfactor 0.75
 
 
Constructor of ArrayList=3
**************************
7.1. Default Constructor
^^^^^^^^^^^^^^^^^^^^^^^^
ArrayList()
Description: Creates an empty ArrayList with an initial capacity of 10. The internal array is initially allocated with this default capacity, which will grow automatically as needed.

7.2. Constructor with Initial Capacity
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ArrayList(int initialCapacity)
Description: Creates an empty ArrayList with the specified initial capacity. This allows you to specify the initial size of the internal array. If the initial capacity is exceeded, the array will automatically grow.
Parameter:
initialCapacity: The initial capacity of the ArrayList. Must be non-negative. If the capacity is negative, an IllegalArgumentException will be thrown.

7.3. Constructor with Collection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ArrayList(Collection<? extends E> c)
Description: Creates an ArrayList containing the elements of the specified collection. This constructor initializes the ArrayList with the elements from the given collection.

Parameter:
c: A collection whose elements are to be placed into the ArrayList. The ArrayList will have the same size as the collection c and will contain the same elements in the same order.
 

______________________________________________________________________________________________________________________________________________________________
8)When to Use clone()
**************************
Creating Backup Copies: When you need to create a backup copy of a list to preserve its state before performing operations that might alter it.

Immutable Data Structures: If you have an ArrayList with immutable elements (like strings or integers), cloning can be used to create a copy of the list safely.

Undo/Redo Operations: In applications with undo/redo functionality, you might clone the list to save its state before making changes.

Key Considerations
Shallow Copy: Remember that clone() performs a shallow copy. If the list contains mutable objects, changes to those objects will affect both the original and the cloned list.

Object Type Casting: The clone() method returns an Object, so it needs to be cast to ArrayList when using it. Ensure the list type is correctly cast to avoid ClassCastException.

Implementation: While clone() is available in ArrayList, it's not always the best approach for copying lists, especially if deep copies are needed or if working with more complex data structures. For deep copying, you may need to manually copy elements or use libraries that provide deep copy utilities.
Testing and Prototyping: Cloning can be useful in testing scenarios where you need to test modifications to a list without altering the original data.
______________________________________________________________________________________________________________________________________________________________
9)LinkedList
***************
ex mthods:push,pop,peek,pol,offer and peekfirst ,peekLast,polfirst,polllast,offer first,offerlast
more memory bcz it need to store befor and after poijters also for every nodes
Construcor of LinkedlIst =2
****************************
9.1)Default Constructor
^^^^^^^^^^^^^^^^^^^^^^

LinkedList<String> list = new LinkedList<>();

9.2)Constructor with a Collection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

public LinkedList(Collection<? extends E> c)
______________________________________________________________________________________________________________________________________________________________
Vector
********

1. Default Constructor
​The default constructor of the Vector class creates a vector with an initial capacity of 10.​ This means that the vector can hold up to 10 elements before it needs to resize automatically to accommodate more elements.

2. Constructor with Initial Size
Another constructor allows you to specify the initial capacity of the vector. You can initialize a vector with a specific size using the constructor Vector(int size), which sets the maximum number of elements it can initially hold

3. Constructor with Initial Size and Capacity Increment
The Vector(int size, int incr) constructor allows you to define both the initial size of the vector and the increment amount. This means that whenever the vector reaches its capacity and requires more space, it will increase its capacity by the specified increment value.

4. Constructor from a Collection
Finally, you can create a vector from an existing collection using the constructor Vector(Collection c). This constructor initializes the vector with the elements from the specified collection, maintaining the insertion order.
______________________________________________________________________________________________________________________________________________________________

QUEUE(I)IN COLLECTION(I)->2 Interface 1 class
&&&&&&&&&&&&&&&&&&&&&&&&&&&&
As discussed earlier, FIFO concept is used for insertion and deletion of elements from a queue.
The Java Queue provides support for all of the methods of the Collection interface including deletion, insertion, etc.
PriorityQueue, ArrayBlockingQueue and LinkedList are the implementations that are used most frequently.
The NullPointerException is raised, if any null operation is done on the BlockingQueues.
Those Queues that are present in the util package are known as Unbounded Queues.
Those Queues that are present in the util.concurrent package are known as bounded Queues.
All Queues barring the Deques facilitates removal and insertion at the head and tail of the queue; respectively. In fact, deques support element insertion and removal at both ends.

1)priority Queue class(class)
******************************
->A priority queue is a specialized type of queue in which each element is associated with a priority value. Elements are removed according to their priority rather than their order in the queue.
->In a priority queue, the element with the highest priority is served before other elements with lower priority. In cases where two elements share the same priority, the queue resolves the order 
using the FIFO principle, ensuring stability in processing.
-> Types of Priority Queues:-
There are primarily two types of priority queues: 
Min-Priority Queue: Where lower priority numbers represent higher priorities, meaning the element with the lowest value is served first.
Max-Priority Queue: Where higher priority numbers represent higher priorities, meaning the element with the highest value is served first.

Constructors of Priorityquue
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1. Default Constructor
The no-argument constructor creates a PriorityQueue with a default initial capacity of 11 and orders its elements according to their natural ordering. This means that the elements will be arranged in ascending order by default.
2. Initial Capacity Constructor
This constructor initializes a PriorityQueue with a specified initial capacity. Similar to the default constructor, it orders the elements according to their natural ordering
3.comparator Constructor
Creates a priority queue with the specified comparator. The comparator is used to order the elements in the queue. If you provide a comparator, the priority queue will use it to determine the order of elements.
4. Initial Capacity with Comparator Constructor
This constructor allows the initialization of a PriorityQueue with a specified initial capacity and a Comparator<E>. The elements are ordered according to the given comparator, allowing for a custom ordering mechanism.
5. Collection Constructor
This constructor accepts a Collection<E> as its argument and initializes the PriorityQueue with the elements from the specified collection. The elements in the priority queue are ordered according to their natural ordering or by a specified comparator.
6. Priority Queue Copy Constructor
This constructor creates a PriorityQueue containing all elements from an existing PriorityQueue. This enables the creation of a new priority queue with the same order as another.
7. SortedSet Constructor
This constructor initializes a PriorityQueue with the elements from a specified SortedSet. Similar to the collection constructor, the elements are arranged based on their natural ordering or a specified comparator.



2)BLOCKING DEQUEUE(Interface)
&&&&&&&&&&&&&&&&&&&&&&&&&&&&
2.1Array BlockingQueue class
***************************
2.2Linked BlockingQUeue class
****************************


DEQUEUE IN COLLECTION
&&&&&&&&&&&&&&&&&&&&&&&&&
The Deque supports the addition as well as the removal of elements from both ends of the data structure. Therefore, a deque can be used as a stack or a queue. We know that the stack supports the Last In First Out (LIFO) operation, and FIFO stack operation.
t. Deque is an acronym for "double ended queue".

1)ArrayDeque class
******************
Unlike Queue, we can add or remove elements from both sides.
Null elements are not allowed in the ArrayDeque.
ArrayDeque is not thread safe, in the absence of external synchronization.
ArrayDeque has no capacity restrictions.
ArrayDeque is faster than LinkedList and Stack.

Consyrcutor of ArrayDequee
*****************************
1. Default Constructor
The no-argument constructor creates a PriorityQueue with a default initial capacity of 11 and orders its elements according to their natural ordering. This means that the elements will be arranged in ascending order by default.
2. Initial Capacity Constructor
This constructor initializes a PriorityQueue with a specified initial capacity. Similar to the default constructor, it orders the elements according to their natural ordering
3. Collection Constructor
This constructor accepts a Collection<E> as its argument and initializes the PriorityQueue with the elements from the specified collection. The elements in the priority queue are ordered according to their natural ordering or by a specified comparator.
y it extends abstractcollection dlass?

2)Linkedlist class
********************
refer above


